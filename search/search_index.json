{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mir-seek \ud83d\udd2c An awesome microRNA-sequencing pipeline This is the home of the pipeline, mir-seek. Its long-term goals: to accurately estimate microRNA expression, to perform quality-control, and to boldly discover known and novel miRNAs like no pipeline before! Overview \u00b6 Welcome to mir-seek's documentation! This guide is the main source of documentation for users that are getting started with the miR-sequencing pipeline . The ./mir-seek pipeline is composed several inter-related sub commands to setup and run the pipeline across different systems. Each of the available sub commands perform different functions: mir-seek run Run the mir-seek pipeline with your input files. mir-seek unlock Unlocks a previous runs output directory. mir-seek install Download remote reference files locally. mir-seek cache Cache remote software containers locally. mir-seek is a comprehensive microRNA-sequencing pipeline. It relies on technologies like Singularity 1 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with data generated from Illumina short-read sequencing technologies. As input, it accepts a set of single-end FastQ files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub command. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github . Contribute \u00b6 This site is a living document, created for and by members like you. mir-seek is maintained by the members of NCBR and is improved by continous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository . Citation \u00b6 Please note that more citation formats and releases can be found on the mir-seek zenodo page . If you use this software, please cite it as below: BibTex APA @software{Kuhn_OpenOmics_mir-seek_2024, author = {Skyler, Kuhn and Gary, Zhang}, title = {OpenOmics/mir-seek: v0.3.0}, month = sep, year = 2024, publisher = {Zenodo}, version = {v0.3.0}, doi = {10.5281/zenodo.13834238}, url = {https://doi.org/10.5281/zenodo.13834238} } Skyler, K., & Gary, Z. (2024). OpenOmics/mir-seek: v0.3.0 (v0.3.0). Zenodo. https://doi.org/10.5281/zenodo.13834238 References \u00b6 1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"About"},{"location":"#overview","text":"Welcome to mir-seek's documentation! This guide is the main source of documentation for users that are getting started with the miR-sequencing pipeline . The ./mir-seek pipeline is composed several inter-related sub commands to setup and run the pipeline across different systems. Each of the available sub commands perform different functions: mir-seek run Run the mir-seek pipeline with your input files. mir-seek unlock Unlocks a previous runs output directory. mir-seek install Download remote reference files locally. mir-seek cache Cache remote software containers locally. mir-seek is a comprehensive microRNA-sequencing pipeline. It relies on technologies like Singularity 1 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with data generated from Illumina short-read sequencing technologies. As input, it accepts a set of single-end FastQ files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub command. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github .","title":"Overview"},{"location":"#contribute","text":"This site is a living document, created for and by members like you. mir-seek is maintained by the members of NCBR and is improved by continous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository .","title":"Contribute"},{"location":"#citation","text":"Please note that more citation formats and releases can be found on the mir-seek zenodo page . If you use this software, please cite it as below: BibTex APA @software{Kuhn_OpenOmics_mir-seek_2024, author = {Skyler, Kuhn and Gary, Zhang}, title = {OpenOmics/mir-seek: v0.3.0}, month = sep, year = 2024, publisher = {Zenodo}, version = {v0.3.0}, doi = {10.5281/zenodo.13834238}, url = {https://doi.org/10.5281/zenodo.13834238} } Skyler, K., & Gary, Z. (2024). OpenOmics/mir-seek: v0.3.0 (v0.3.0). Zenodo. https://doi.org/10.5281/zenodo.13834238","title":"Citation"},{"location":"#references","text":"1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"References"},{"location":"license/","text":"MIT License \u00b6 Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"faq/questions/","text":"Frequently Asked Questions \u00b6 This page is still under construction. If you need immediate help, please open an issue on Github!","title":"General Questions"},{"location":"faq/questions/#frequently-asked-questions","text":"This page is still under construction. If you need immediate help, please open an issue on Github!","title":"Frequently Asked Questions"},{"location":"usage/cache/","text":"mir-seek cache \u00b6 1. About \u00b6 The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote software containers from Dockerhub . Caching remote software containers allows the pipeline to run in an offline mode where no requests are made. The cache sub command can also be used to pull our pre-built software container onto a new cluster or target system. These containers are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that a cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. The path of these locally cached SIFs can be passed to the run sub commands --sif-cache option. Caching software containers is fast and easy! In its most basic form, mir-seek cache only has one required input . 2. Synopsis \u00b6 $ ./mir-seek cache [--help] [--dry-run] \\ --sif-cache SIF_CACHE The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a directory to cache remote Docker images via the --sif-cache argument. Once the cache has pipeline completed, the local sif cache can be passed to the --sif-cache option of the mir-seek run subcomand. This enables the pipeline to run in an offline mode. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --sif-cache SIF_CACHE Path where a local cache of SIFs will be stored. type: path Any images defined in config/containers.json will be pulled into the local filesystem. The path provided to this option can be passed to the --sif-cache option of the mir-seek run subcomand. This allows for running the build and run pipelines in an offline mode where no requests are made to external sources. This is useful for avoiding network issues or DockerHub pull rate limits. Please see mir-seek run for more information. Example: --sif-cache /data/$USER/cache 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean flag Only displays what software container will be cached locally. Does not execute anything! Example: --dry-run 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run to see what will be pulled ./mir-seek cache --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Cache remote resources locally. # This command will NOT automatically submit # a job to the cluster. As so, we recommend # submitting this next command to the cluster # as a job. Download speeds will vary so it # is best to set the wall time a few hours. ./mir-seek cache --sif-cache /data/ $USER /cache","title":"mir-seek cache"},{"location":"usage/cache/#mir-seek-cache","text":"","title":"mir-seek cache"},{"location":"usage/cache/#1-about","text":"The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote software containers from Dockerhub . Caching remote software containers allows the pipeline to run in an offline mode where no requests are made. The cache sub command can also be used to pull our pre-built software container onto a new cluster or target system. These containers are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that a cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. The path of these locally cached SIFs can be passed to the run sub commands --sif-cache option. Caching software containers is fast and easy! In its most basic form, mir-seek cache only has one required input .","title":"1. About"},{"location":"usage/cache/#2-synopsis","text":"$ ./mir-seek cache [--help] [--dry-run] \\ --sif-cache SIF_CACHE The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a directory to cache remote Docker images via the --sif-cache argument. Once the cache has pipeline completed, the local sif cache can be passed to the --sif-cache option of the mir-seek run subcomand. This enables the pipeline to run in an offline mode. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/cache/#21-required-arguments","text":"--sif-cache SIF_CACHE Path where a local cache of SIFs will be stored. type: path Any images defined in config/containers.json will be pulled into the local filesystem. The path provided to this option can be passed to the --sif-cache option of the mir-seek run subcomand. This allows for running the build and run pipelines in an offline mode where no requests are made to external sources. This is useful for avoiding network issues or DockerHub pull rate limits. Please see mir-seek run for more information. Example: --sif-cache /data/$USER/cache","title":"2.1 Required Arguments"},{"location":"usage/cache/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean flag Only displays what software container will be cached locally. Does not execute anything! Example: --dry-run","title":"2.2 Options"},{"location":"usage/cache/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run to see what will be pulled ./mir-seek cache --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Cache remote resources locally. # This command will NOT automatically submit # a job to the cluster. As so, we recommend # submitting this next command to the cluster # as a job. Download speeds will vary so it # is best to set the wall time a few hours. ./mir-seek cache --sif-cache /data/ $USER /cache","title":"3. Example"},{"location":"usage/install/","text":"mir-seek install \u00b6 1. About \u00b6 The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek install sub command in more detail. This page is still under construction \ud83d\udc77, more information is coming soon!","title":"mir-seek install"},{"location":"usage/install/#mir-seek-install","text":"","title":"mir-seek install"},{"location":"usage/install/#1-about","text":"The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek install sub command in more detail. This page is still under construction \ud83d\udc77, more information is coming soon!","title":"1. About"},{"location":"usage/run/","text":"mir-seek run \u00b6 1. About \u00b6 The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek run sub command in more detail. With minimal configuration, the run sub command enables you to start running mir-seek pipeline. Setting up the mir-seek pipeline is fast and easy! In its most basic form, mir-seek run only has three required inputs . 2. Synopsis \u00b6 $ mir-seek run [--help] \\ [--dry-run] [--job-name JOB_NAME] [--mode {slurm,local}] \\ [--sif-cache SIF_CACHE] [--singularity-cache SINGULARITY_CACHE] \\ [--silent] [--threads THREADS] [--tmp-dir TMP_DIR] \\ [--min-read-length MIN_READ_LENGTH] \\ [--max-read-length MAX_READ_LENGTH] \\ [--novel-mir-identification] \\ --input INPUT [INPUT ...] \\ --output OUTPUT \\ --genome {hg38,mm10} The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of single-end FastQ files (globbing is supported) to analyze via --input argument, an output directory to store results via --output argument, and a reference genome for alignment and annotation via --genome argument. Use you can always use the -h option for information on a specific sub command. 2.1 Required arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input FastQ file(s). type: file(s) One or more single-end FastQ files can be provided. The pipeline does NOT support paired-end data. From the command-line, each input file should seperated by a space. Globbing is supported! This makes selecting FastQ files easy. Please note the input FastQ files should always be gzipp-ed. Example: --input .tests/*.R1.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/mir-seek_out --genome {hg38,mm10} Reference genome. type: string This option defines the reference genome of the samples. mir-seek does comes bundled with pre-built reference files from GENCODE and miRBase (v22) for human and mouse samples. Please select from one of the following options: hg38 , mm10 . Please note that hg38 is a human reference genome, while mm10 is a reference genomes available for mouse. Example: Example: --genome hg38 2.2 Analysis options \u00b6 Each of the following arguments are optional, and do not need to be provided. --min-read-length MIN_READ_LENGTH Minimum read length. type: int default: 17 After trimming adapters, reads shorter than this length will be discarded. ENCODE discards reads shorter than 16 bp; however, miRDeep2 enforces a minimum read-length of 17 bp. If you feel 17 bp is too permissive, setting this option's value to 18 is also a good alternative. Example: ---min-read-length 17 --max-read-length MAX_READ_LENGTH Maximum read length. type: int default: 27 After trimming adapters, reads that exceed this length will be trimmed again from their 3'-end to this exact length. This option may result in the recovery of additional aligned reads, as miRDeep2's aligner only allows for 1 mismatch. This means if a trimmed read's length is 26 bps and it perfectly aligns to a 24 bp micro-RNA, then it will remain unaligned (2 mismatches); however, if this option were set to 25, then it would not be discarded. If you do not want to cropped any of the reads, you can set this options value to a higher number, like 999. If you want to maximize the number of aligned reads at the cost of accuracy/precision, then you can set this option to a lower number, like 25. Please take care before overriding the default value to this option. The maximum sequence length of mature miRNAs in miRBase (v22) for hsa/human is 28, while the maximum sequence length of hairpin miRNAs miRBase (v22) for hsa/human is 180. The maximum sequence length of mature miRNA in miRBase (v22) in mmu/mouse is 27, while the maximum sequence length of hairpin miRNAs miRBase (v22) for mmu/mouse is 147. Example: ---max-read-length 27 --novel-mir-identification Quantify novel microRNAs. type: boolean flag This option will enable the pipeline to identify novel microRNAs. If this option is provided, the pipeline will run mirdeep2 using a two-pass approach to create a counts matrix of novel miR expression. In the first-pass, novel miRs are identified using information across all samples. In the second-pass, the expression of each novel is quantified using quantifier.pl and a counts matrix is produced. If you are interested in identifying and quantifying novel microRNAs, then please provide this option. Please note that this option will increase the runtime of the pipeline. Example: --novel-mir-identification 2.3 Orchestration options \u00b6 Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running mir-seek in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:mir-seek When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:mir-seek\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The mir-seek cache subcommand can be used to create a local SIF cache. Please see mir-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running mir-seek with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOBID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/ 2.4 Miscellaneous options \u00b6 Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 1.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./mir-seek run --input .tests/*.fastq.gz \\ --output /data/ $USER /output \\ --genome hg38 \\ --novel-mir-identification \\ --mode slurm \\ --dry-run # Step 2B.) Run the mir-seek pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./mir-seek run --input .tests/*.fastq.gz \\ --output /data/ $USER /output \\ --genome hg38 \\ --novel-mir-identification \\ --mode slurm","title":"mir-seek run"},{"location":"usage/run/#mir-seek-run","text":"","title":"mir-seek run"},{"location":"usage/run/#1-about","text":"The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek run sub command in more detail. With minimal configuration, the run sub command enables you to start running mir-seek pipeline. Setting up the mir-seek pipeline is fast and easy! In its most basic form, mir-seek run only has three required inputs .","title":"1. About"},{"location":"usage/run/#2-synopsis","text":"$ mir-seek run [--help] \\ [--dry-run] [--job-name JOB_NAME] [--mode {slurm,local}] \\ [--sif-cache SIF_CACHE] [--singularity-cache SINGULARITY_CACHE] \\ [--silent] [--threads THREADS] [--tmp-dir TMP_DIR] \\ [--min-read-length MIN_READ_LENGTH] \\ [--max-read-length MAX_READ_LENGTH] \\ [--novel-mir-identification] \\ --input INPUT [INPUT ...] \\ --output OUTPUT \\ --genome {hg38,mm10} The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of single-end FastQ files (globbing is supported) to analyze via --input argument, an output directory to store results via --output argument, and a reference genome for alignment and annotation via --genome argument. Use you can always use the -h option for information on a specific sub command.","title":"2. Synopsis"},{"location":"usage/run/#21-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input FastQ file(s). type: file(s) One or more single-end FastQ files can be provided. The pipeline does NOT support paired-end data. From the command-line, each input file should seperated by a space. Globbing is supported! This makes selecting FastQ files easy. Please note the input FastQ files should always be gzipp-ed. Example: --input .tests/*.R1.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/mir-seek_out --genome {hg38,mm10} Reference genome. type: string This option defines the reference genome of the samples. mir-seek does comes bundled with pre-built reference files from GENCODE and miRBase (v22) for human and mouse samples. Please select from one of the following options: hg38 , mm10 . Please note that hg38 is a human reference genome, while mm10 is a reference genomes available for mouse. Example: Example: --genome hg38","title":"2.1 Required arguments"},{"location":"usage/run/#22-analysis-options","text":"Each of the following arguments are optional, and do not need to be provided. --min-read-length MIN_READ_LENGTH Minimum read length. type: int default: 17 After trimming adapters, reads shorter than this length will be discarded. ENCODE discards reads shorter than 16 bp; however, miRDeep2 enforces a minimum read-length of 17 bp. If you feel 17 bp is too permissive, setting this option's value to 18 is also a good alternative. Example: ---min-read-length 17 --max-read-length MAX_READ_LENGTH Maximum read length. type: int default: 27 After trimming adapters, reads that exceed this length will be trimmed again from their 3'-end to this exact length. This option may result in the recovery of additional aligned reads, as miRDeep2's aligner only allows for 1 mismatch. This means if a trimmed read's length is 26 bps and it perfectly aligns to a 24 bp micro-RNA, then it will remain unaligned (2 mismatches); however, if this option were set to 25, then it would not be discarded. If you do not want to cropped any of the reads, you can set this options value to a higher number, like 999. If you want to maximize the number of aligned reads at the cost of accuracy/precision, then you can set this option to a lower number, like 25. Please take care before overriding the default value to this option. The maximum sequence length of mature miRNAs in miRBase (v22) for hsa/human is 28, while the maximum sequence length of hairpin miRNAs miRBase (v22) for hsa/human is 180. The maximum sequence length of mature miRNA in miRBase (v22) in mmu/mouse is 27, while the maximum sequence length of hairpin miRNAs miRBase (v22) for mmu/mouse is 147. Example: ---max-read-length 27 --novel-mir-identification Quantify novel microRNAs. type: boolean flag This option will enable the pipeline to identify novel microRNAs. If this option is provided, the pipeline will run mirdeep2 using a two-pass approach to create a counts matrix of novel miR expression. In the first-pass, novel miRs are identified using information across all samples. In the second-pass, the expression of each novel is quantified using quantifier.pl and a counts matrix is produced. If you are interested in identifying and quantifying novel microRNAs, then please provide this option. Please note that this option will increase the runtime of the pipeline. Example: --novel-mir-identification","title":"2.2 Analysis options"},{"location":"usage/run/#23-orchestration-options","text":"Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running mir-seek in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:mir-seek When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:mir-seek\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The mir-seek cache subcommand can be used to create a local SIF cache. Please see mir-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running mir-seek with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOBID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/","title":"2.3 Orchestration options"},{"location":"usage/run/#24-miscellaneous-options","text":"Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help","title":"2.4 Miscellaneous options"},{"location":"usage/run/#3-example","text":"# Step 1.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./mir-seek run --input .tests/*.fastq.gz \\ --output /data/ $USER /output \\ --genome hg38 \\ --novel-mir-identification \\ --mode slurm \\ --dry-run # Step 2B.) Run the mir-seek pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./mir-seek run --input .tests/*.fastq.gz \\ --output /data/ $USER /output \\ --genome hg38 \\ --novel-mir-identification \\ --mode slurm","title":"3. Example"},{"location":"usage/unlock/","text":"mir-seek unlock \u00b6 1. About \u00b6 The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking mir-seek pipeline output directory is fast and easy! In its most basic form, mir-seek unlock only has one required input . 2. Synopsis \u00b6 $ ./mir-seek unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/mir-seek_out 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory mir-seek unlock --output /data/ $USER /output","title":"mir-seek unlock"},{"location":"usage/unlock/#mir-seek-unlock","text":"","title":"mir-seek unlock"},{"location":"usage/unlock/#1-about","text":"The mir-seek executable is composed of several inter-related sub commands. Please see mir-seek -h for all available options. This part of the documentation describes options and concepts for mir-seek unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking mir-seek pipeline output directory is fast and easy! In its most basic form, mir-seek unlock only has one required input .","title":"1. About"},{"location":"usage/unlock/#2-synopsis","text":"$ ./mir-seek unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/unlock/#21-required-arguments","text":"--output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/mir-seek_out","title":"2.1 Required Arguments"},{"location":"usage/unlock/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.2 Options"},{"location":"usage/unlock/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory mir-seek unlock --output /data/ $USER /output","title":"3. Example"}]}